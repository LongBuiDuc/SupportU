FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# SuportU
This is document for SuportU 's REST API. All responses from and to the API will be in JSON format.

#General Request Response
Almost APIs requires a request with application/json content type (except API for upload file, image).

#Authentication
API use JWT to authenticate user. Exactly we used JWT Bearer Authentication.
Almost APIs requires authentication on header with Authorization tag and value formatted:

Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRw319.sSaOosOuPWvTYVL

#Error
We must catch common errors in all API to ensure our application works properly.

        {
            "code":"DB_ERROR",
            "message":"Cannot create new user!"
        }

|         HTTP CODE         |       Error code        |  Error message               |
|---------------------------|-------------------------|------------------------------|
|           401             |     unauthorized        |    Authen fail               |

## Group General
Get general infomations.        
### Check Update Version [POST /api/app/version]
Check update verison, if current version is less than force version update, return true.
Not need authentication

+ Request (application/json)

        {
            "os": "android",
            "currentVersion": "1.0.1"
        }
    
+ Response 200 (application/json)

        {
            "update": true,
            "version":"1.0.3",
        }
        
+ Response 400 (application/json)

        {
            "code":"VERSION_WRONG",
            "message":"Can't compare version to check update",
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get All Schools [GET /api/schools]
Get all universities.
Not need authentication

+ Response 200 (application/json)

        [
            {
                "id":1,
                "name":"Seoul Technolozy University",
                "createdDate":"2020-07-30T12:32:27",
                "updateDate":"2020-07-30T12:32:27"
            },
            {
                "id":2,
                "name":"Seoul Intenational University",
                "createdDate":"2020-07-30T12:32:27",
                "updateDate":"2020-07-30T12:32:27"
            },
            {
                "id":3,
                "name":"Kangnam University",
                "createdDate":"2020-07-30T12:32:27",
                "updateDate":"2020-07-30T12:32:27"
            }
        ]
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }  

## Group Authentication
### SignIn [POST /api/authorization/signin]
User login

+ Request (application/json)

        {
            "email": "duclongbuivn@gmail.com",
            "password": "123456"
        }

+ Response 200 (application/json)

        {
            "user":
            {
                "id": 1,
                "name": "Bui Duc Long",
                "email":"duclongbuivn@gmail.com",
                "password": "123456",
                "phone": "56465465",
                "gender": "male",
                "hobbies": "Run",
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "null"
            },
            "token": "iofgnojsmopdd[spifjdwfgl;ew;d,sa,;cjkposawekdfj"
        }
        
+ Response 400 (application/json)

        {
            "code":"EMAIL_EXISTED",
            "message":"The email already exist!"
        }

        {  
            "code":"EMAIL_NOT_FOUND_ERROR",
            "message":"Email Not Found!"
        }
        
        {  
            "code":"PASSWORD_WRONG",
            "message":"Password is wrong!"
        }
        
        {  
            "code":"USER_STATUS_INVALID",
            "message":"User Status is invalid!"
        }
        
        {  
            "code":"USER_STATUS_NOT_ACTIVE",
            "message":"User Status is not active!"
        }
        
        {  
            "code":"USER_STATUS_BLOCK",
            "message":"User Status is blocked or terminated!!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Database Error or some exceptions on Server!",
        }
        
### SignUp [POST /api/authorization/signup]
User signup

+ Request (application/json)

        {
            "email": "registermail@gmail.com",
            "password": "123456",
            "name": "ofdspf",
            "phone": "0847924830",
            "gender": "male",
            "identity": "Student",
            "degree": "Bachelor",
            "school": "Yankee University",
            "idNumber": 1,
            "nationality": "Republic of Korea",
            "department": "The national language",
            "motherTongue": "Korean",
            "address": "Sejong Road",
            "detailAddress": "000 Sejong Road, Junggu, Seoul",
            "schoolEmail": "university@email.net",
            "fcmToken": "c1TDG0TvRXmkeAOy1VEJ8y:APA91bGkQo5Y7ttdDXwmKsVmq1Wbpxrwc9X_ub1QJKQ2Z7Mc2bQH0dG-hlvqdXCFUJdTk6DBBXhqCd35Pr2X-8WUSnbji4fMu_Ir0dBTs4C6EKkIzw8CBaUgfqgP63b8tkJZUzfE0RF7"
        }

+ Response 200 (application/json)

        {
            "user": {
                "id": 57,
                "email": "registermailtes@gmail.com",
                "password": "123456",
                "name": "ofdspf",
                "avatar": null,
                "phone": "0847924830",
                "gender": "male",
                "identity": "Student",
                "degree": "Bachelor",
                "school": "Yankee University",
                "idNumber": 1,
                "address": "Sejong Road",
                "detailAddress": "000 Sejong Road, Junggu, Seoul",
                "schoolEmail": "university@email.net",
                "department": "The national language",
                "nationality": "Republic of Korea",
                "motherTongue": "Korean",
                "consultation": null,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": null,
                "fcmToken": "c1TDG0TvRXmkeAOy1VEJ8y:APA91bGkQo5Y7ttdDXwmKsVmq1Wbpxrwc9X_ub1QJKQ2Z7Mc2bQH0dG-hlvqdXCFUJdTk6DBBXhqCd35Pr2X-8WUSnbji4fMu_Ir0dBTs4C6EKkIzw8CBaUgfqgP63b8tkJZUzfE0RF7"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6WyIwIiwib2Zkc3BmIiwicmVnaXN0ZXJtYWlsdGVzQGdtYWlsLmNvbSJdLCJpc3MiOiJodHRwczovL2xvY2FsaG9zdDo0NDM2OS8iLCJhdWQiOiJodHRwczovL2xvY2FsaG9zdDo0NDMzNi8ifQ.2_kXvcggMpwnn-1wSw_aiv7GV2vqHG5xJnvAoM9EiVY"
        }
        
+ Response 401 (application/json)

        {
            "code":"EMAIL_EXISTED",
            "message":"The email already exist!",
        }
        
        {
            "code":"EMAIL_INVALID",
            "message":"The email is invalid!",
        }
        
        {
            "code":"PHONENUMBER_EXISTED",
            "message":"Phone numeber already exist!",
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### Forgot Email [POST /api/authorization/forgotemail]
Forgot email.

+ Request (application/json)

        {
            "name": "duclong",
            "phone": "083243315",
        }
    
+ Response 200 (application/json)

        {
            "email":"duclongbuivn@gmail.com"
        }
        
+ Response 400 (application/json)

        
        {
          "code": "PHONENUMBER_NOT_FOUND_ERROR",
          "message": "Phone numeber Not Found!"
        }
        
        {
          "code": "USER_NAME_NOT_FOUND_ERROR",
          "message": "User name Not Found!"
        }
        
+ Response 500 (application/json)

        {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "error message"
        }

        
### Forgot Password [POST /api/authorization/forgotpassword]
Forgot password.

+ Request (application/json)

        {
            "name": "duclong",
            "email": "duclongbuivn@gmail.com",
        }
    
+ Response 200 (application/json)

        {
            "code":"PASSWORD_WILL_SENT",
            "message":"Password will be sent to the email registration!"
        }
        
+ Response 400 (application/json)

        
        {
          "code": "PHONENUMBER_NOT_FOUND_ERROR",
          "message": "Phone numeber Not Found!"
        }
        
        {
          "code": "USER_NAME_NOT_FOUND_ERROR",
          "message": "User name Not Found!"
        }
        
+ Response 500 (application/json)

        {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "error message"
        }      
        
## Group Users

### Get My Profile [GET /api/users/myprofile]
Get my profile.

+ Response 200 (application/json)

        {
            "id": 47,
            "email": "registermail@gmail.com",
            "password": "123456",
            "name": "ofdspf",
            "avatar": null,
            "phone": "0847924833",
            "gender": "male",
            "identity": "Student",
            "degree": "Bachelor",
            "school": "Yankee University",
            "idNumber": 1,
            "address": "Sejong Road",
            "detailAddress": "000 Sejong Road, Junggu, Seoul",
            "schoolEmail": "university@email.net",
            "department": "The national language",
            "nationality": "Republic of Korea",
            "motherTongue": "Korean",
            "consultation": null,
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": null,
            "fcmToken": "c1TDG0TvRXmkeAOy1VEJ8y:APA91bGkQo5Y7ttdDXwmKsVmq1Wbpxrwc9X_ub1QJKQ2Z7Mc2bQH0dG-hlvqdXCFUJdTk6DBBXhqCd35Pr2X-8WUSnbji4fMu_Ir0dBTs4C6EKkIzw8CBaUgfqgP63b8tkJZUzfE0RF7"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Update User Infomation [PUT /api/users]
Update Users infomation.

+ Request (application/json)

        {
            "email": "duclongbuivn@gmail.com",
            "password": "123456",
            "name": "logn",
            "avatar": "abcxyz",
            "phone": "56465465",
            "gender": "male",
            "identity": "Student",
            "degree": "Bachelor",
            "school": "Yankee University",
            "idNumber": 1,
            "nationality": "Republic of Korea",
            "department": "The national language",
            "motherTongue": "Korean",
            "consultation": "abcxyz",
            "address": "Sejong Road",
            "detailAddress": "000 Sejong Road, Junggu, Seoul",
            "schoolEmail": "university@email.net"
        }
    
+ Response 200 (application/json)

        {
          "code": "UPDATE_SUCCESS",
          "message": "Request confirmed!"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
### Change Password [POST /api/authorization/changePassword]
Change password of Users.

+ Request (application/json)

        {
            "newpassword": "123456",
            "oldpassword": "654321"
        }
    
+ Response 200 (application/json)

        {
            "code":"PASSWORD_UPDATED",
            "message":"Password updated!",
        }
        
+ Response 400 (application/json)

        {
            "code":"PASSWORD_WRONG",
            "message":"Current password is invalid!",
        }
        
        {
            "code":"PASSWORD_NOT_MATCH",
            "message":"Current password is invalid!",
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### UploadFile [POST /api/file/upload]
Upload File.

+ Request (application/json)

        {
            "Content-Disposition": "form-data; name="images[files]"; filename="image1.jpg",filename="image2.jpg",filename="image3.jpg""
        }
    
+ Response 200 (application/json)

        {
            [
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg",
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg",
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg"
            ]
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
## Group Search

### Search Users [GET /api/search/users{?keyword,page,identity}]
Search user infomation by name

identity: STUDENT or PROFESSOR-EMPLOYEE

+ Parameters
    + keyword -  A query variable
    + page -  A query variable
    + identity -  A query variable
+ Response 200 (application/json)

        [
            {
                "id":1,
                "name":"duclong",
                "avatar":"http://supportu.long.png"
            },
            {
                "id":2,
                "name":"long bui",
                "avatar":"http://supportu.longbui.png"
            }
        ]
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 400 (application/json)

        {
          "code": "BAD_REQUEST_ERROR",
          "message": "Bad Request!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
                
## Group Classes
### Create Classes [POST /api/classes/create]    
Create class

+ Request (application/json)

        {
           "name": "class name",
            "nameEng": "class name english",
            "professorName": "Hong Kim Dong Prof",
            "faculty": "abcxyz",
            "code": "123A",
            "semester": "0000year",
            "classIficationNumber": "123",
            "courseClassification": "123",
            "creadits": 1000,
            "maximumStudent": 20,
            "classroom": "Room",
            "lectureTimes":[
                {
                    "day": "MON",
                    "fromHour": "15:30",
                    "toHour": "19:10"
                },
                {
                    "day": "TUE",
                    "fromHour": "16:30",
                    "toHour": "18:10"
                }
            ],
            "advisors":[
                {
                    "userId": 123,
                    "role": "VIEWER"
                },
                {
                    "userId": 456,
                    "role": "FULL_CONTROL"
                }
            ],
            "inviteStudents": [1, 2 , 3],
            "availability": "PUBLIC",
            "chattingRoom": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learningMethod": "online",
            "gradingMethod": "online",
            "excerciseByWeek": "1",
            "addingExcercise": "abcxyz",
            "numberWeek": 2,
            "color": "#FF0000FF",
            "syllabus": [
                {
                    "week": 1,
                    "topic": "topic 1",
                    "content": "abcxyz"
                },
                {
                    "week": 2,
                    "topic": "topic 2",
                    "content": "abcxyz"
                }
            ]
        }

+ Response 201

        {
               "id": 60,
                "name": "class name",
                "nameEng": "class name english",
                "userId": 1,
                "professorName": "Hong Kim Dong Prof",
                "faculty": "abcxyz",
                "code": "123A",
                "semester": "0000year",
                "classIficationNumber": "123",
                "courseClassification": "123",
                "creadits": 1000,
                "maximumStudent": 20,
                "classroom": "Room",
                "lectureTimes": [
                    {
                        "id": 7,
                        "classId": 60,
                        "day": "MON",
                        "fromHour": "15:30",
                        "toHour": "19:10",
                        "createdDate": "2020-08-18T10:06:34",
                        "updateDate": "2020-08-18T10:06:34"
                    },
                    {
                        "id": 8,
                        "classId": 60,
                        "day": "TUE",
                        "fromHour": "16:30",
                        "toHour": "18:10",
                        "createdDate": "2020-08-18T10:06:34",
                        "updateDate": "2020-08-18T10:06:34"
                    }
                ],
                "advisors": [
                    {
                        "id": 5,
                        "classId": 60,
                        "userId": 1,
                        "role": "VIEWER",
                        "createdDate": "2020-08-18T10:06:34",
                        "updateDate": "2020-08-18T10:06:34"
                    },
                    {
                        "id": 6,
                        "classId": 60,
                        "userId": 1,
                        "role": "FULL_CONTROL",
                        "createdDate": "2020-08-18T10:06:35",
                        "updateDate": "2020-08-18T10:06:35"
                    }
                ],
                "inviteStudents": [
                    {
                        "id": 1,
                        "name": "tieulong",
                        "avatar": ""
                    },
                    {
                        "id": 2,
                        "name": "teacher1",
                        "avatar": "http://18.162.141.53/api.supportu/1597386001285_2___1597386001284___13244753_1382109491805277_4936278203817120154_n.jpg"
                    },
                    {
                        "id": 3,
                        "name": "user 3",
                        "avatar": ""
                    }
                ],
                "availability": "PUBLIC",
                "chattingRoom": "yes",
                "introduction": "intro...",
                "objectives": "object...",
                "learningMethod": "online",
                "gradingMethod": "online",
                "excerciseByWeek": "1",
                "addingExcercise": "abcxyz",
                "numberWeek": 2,
                "syllabus": [
                    {
                        "id": 62,
                        "classId": 60,
                        "week": 1,
                        "topic": "topic 1",
                        "content": "abcxyz",
                        "createdDate": "2020-08-18T10:06:35",
                        "updateDate": "2020-08-18T10:06:35"
                    },
                    {
                        "id": 63,
                        "classId": 60,
                        "week": 2,
                        "topic": "topic 2",
                        "content": "abcxyz",
                        "createdDate": "2020-08-18T10:06:36",
                        "updateDate": "2020-08-18T10:06:36"
                    }
                ],
                "color": "#FF0000FF",
                "createdDate": "2020-08-18T10:06:33",
                "updateDate": "2020-08-18T10:06:33"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Database Error or some exceptions on Server!",
        }
        
### Edit Classes [PUT /api/classes/edit]    
Edit class

+ Request (application/json)

        {
            "name": "class name",
            "professorName": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classificationNumber": "123",
            "courseClassification": "123",
            "creadits": 1000,
            "maximumStudent": 20,
            "classroom": "Room",
            "lectureTime": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "inviteStudents": "UserName2",
            "availability": "yes",
            "chattingRoom": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learningMethod": "online",
            "gradingMethod": "online",
            "excerciseByweek": "1",
            "numberWeek": 2,
            "syllabus": "abcxyz"
        }

+ Response 200

        {
            "id": 1,
            "name": "class name",
            "professorName": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classificationNumber": "123",
            "courseClassification": "123",
            "creadits": 1000,
            "maximumStudent": 20,
            "classroom": "Room",
            "lectureTime": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "inviteStudents": "UserName2",
            "availability": "yes",
            "chattingRoom": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learningMethod": "online",
            "gradingMethod": "online",
            "excerciseByweek": "1",
            "numberWeek": 2,
            "syllabus": "abcxyz"
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get My Classes [GET /api/classes]    
Get all my classes

+ Response 200

        [
            {
                "id": 1,
                "name": "course name",
                "description": "1",
                "userId": 1,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            },
            {
                "id": 2,
                "name": "Course name 2",
                "description": "Description 2",
                "userId": 2,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            }
        ]
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Delete Class [DELETE /api/classes/{id}]    
Delete my classes. Only owner who created class can be delete their class

+ Response 200

        {
            "code":"DELETE_SUCCESS",
            "message":"Delete class successfuly"
        }
+ Response 400 (application/json)
        
        {
            "code":"OWER_ERROR",
            "message":"Can't delete class is not of yourseft created",
        }

### Select Advisor [GET /api/classes/select/advisor]    
Select advisor. 

+ Response 200

        [
            {
                "id": 49,
                "name": "user 16",
                "idNumber": 33
            },
            {
                "id": 50,
                "name": "user 17",
                "idNumber": 0
            },
            {
                "id": 51,
                "name": "user 18",
                "idNumber": 0
            },
            {
                "id": 53,
                "name": "user 20",
                "idNumber": 0
            },
            {
                "id": 54,
                "name": "user 21",
                "idNumber": 0
            }
        ]
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Select Student [GET /api/classes/select/student]    
Select Student. 

+ Response 200

        [
            {
                "id": 1,
                "name": "user 1",
                "idNumber": 1
            },
            {
                "id": 47,
                "name": "user 14",
                "idNumber": 1
            },
            {
                "id": 48,
                "name": "user 15",
                "idNumber": 0
            },
            {
                "id": 52,
                "name": "user 19",
                "idNumber": 0
            }
        ]
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Delete student in Class [DELETE /api/classstudents/export]    
Delete student in Class

+ Request (application/json)

        {
            "studentsID":[4,5]
        }

+ Response 200

        {
            "code": "DELETE_SUCCESS",
            "message": "Deleted Successfully!"
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

### POST Enroll in Classes [GET /api/classstudents/registration/{classId}]    
Get Enroll in classes

+ Request (application/json)

        {
            "inviteCode": "23E"
        }

+ Response 200

        {
            "code": "REGISTRATION_SUCCESS",
            "message": "Registration success!"
        }
+ Response 400

        {
            "code": "USER_REGISTERED",
            "message": "User already registered!"
        }
        {
            "code": "INVITECODE_INVALID",
            "message": "The invite code is invalid!"
        }

+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }
  
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
## Group Detail Information of Classes
### Get detail information of class [GET /api/classesdetail/detail/{classId}]    
Get detail informatioin of class

+ Response 200

        {
               "id": 63,
                "name": "class name",
                "userId": 1,
                "professorName": "Hong Kim Dong Prof",
                "faculty": "abcxyz",
                "code": "123A",
                "semester": "0000year",
                "classIficationNumber": "123",
                "courseClassification": "123",
                "creadits": 1000,
                "maximumStudent": 20,
                "students": [
                    {
                        "id": 1,
                        "name": "tieulong",
                        "avatar": ""
                    },
                    {
                        "id": 2,
                        "name": "teacher1",
                        "avatar": "http://18.162.141.53/api.supportu/1597386001285_2___1597386001284___13244753_1382109491805277_4936278203817120154_n.jpg"
                    },
                    {
                        "id": 3,
                        "name": "user 3",
                        "avatar": ""
                    }
                ],
                "classroom": "Room",
                "lectureTime": [
                    {
                        "id": 11,
                        "classId": 63,
                        "day": "MON",
                        "fromHour": "15:30",
                        "toHour": "19:10",
                        "createdDate": "2020-08-18T03:17:14",
                        "updateDate": "2020-08-18T03:17:14"
                    },
                    {
                        "id": 12,
                        "classId": 63,
                        "day": "TUE",
                        "fromHour": "16:30",
                        "toHour": "18:10",
                        "createdDate": "2020-08-18T03:17:14",
                        "updateDate": "2020-08-18T03:17:14"
                    }
                ],
                "advisors": [
                    {
                        "id": 1,
                        "name": "tieulong",
                        "avatar": ""
                    },
                    {
                        "id": 1,
                        "name": "tieulong",
                        "avatar": ""
                    }
                ],
                "availability": "PUBLIC",
                "chattingRoom": "yes",
                "introduction": "intro...",
                "objectives": "object...",
                "learningMethod": "online",
                "gradingMethod": "online",
                "excerciseByWeek": "1",
                "addingExcercise": "abcxyz",
                "numberWeek": 2
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get detail class syllabus [GET /api/classesdetail/detail/syllabus/{classId}]    
Get detail class syllabus 

+ Response 200

        {
            [
                {
                    "id": 4,
                    "week": 1,
                    "topic": "topic 1"
                },
                {
                    "id": 5,
                    "week": 1,
                    "topic": "topic 1"
                },
                {
                    "id": 6,
                    "week": 1,
                    "topic": "topic 1"
                }
            ]
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get detail course information for student [GET /api/classesdetail/detail/courseinformation/{classId}]    
Get course information for Student

+ Response 200

        {
           "assignments": [
                {
                    "id": 2,
                    "week": 2,
                    "title": "assignment name 2"
                },
                {
                    "id": 4,
                    "week": 3,
                    "title": "assignment name"
                },
                {
                    "id": 5,
                    "week": 3,
                    "title": "assignment name"
                }
            ],
            "discussions": [
                {
                    "id": 2,
                    "week": 1,
                    "title": "discussion 2"
                },
                {
                    "id": 153,
                    "week": 1,
                    "title": "discussion name"
                },
                {
                    "id": 154,
                    "week": 1,
                    "title": "discussion name"
                }
            ],
            "materials": [
                {
                    "id": 38,
                    "week": 5,
                    "title": "title"
                },
                {
                    "id": 43,
                    "week": 5,
                    "title": "title"
                }
            ],
             "attendances": [
                {
                    "id": 2,
                    "week": 5,
                    "title": null
                },
                {
                    "id": 3,
                    "week": 5,
                    "title": null
                },
                {
                    "id": 4,
                    "week": 5,
                    "title": null
                }
            ],
            "quizes": [
                {
                    "id": 2,
                    "week": 1,
                    "title": "quiz 2"
                },
                {
                    "id": 113,
                    "week": 1,
                    "title": "quizs name"
                },
                {
                    "id": 114,
                    "week": 1,
                    "title": "quizs name"
                }
            ],
            "lives": [
                {
                    "id": 1,
                    "week": 5,
                    "title": "title"
                },
                {
                    "id": 2,
                    "week": 5,
                    "title": "title"
                }
            ]
            
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get detail class student list [GET /api/classstudents/studentlist/{classId}]    
Get detail class student list 

+ Response 200

        {
            "students": [
                {
                    "id": 1,
                    "name": "tieulong",
                    "idNumber": 1,
                    "avatar": ""
                },
                {
                    "id": 2,
                    "name": "teacher1",
                    "idNumber": 123456,
                    "avatar": "http://18.162.141.53/api.supportu/1597386001285_2___1597386001284___13244753_1382109491805277_4936278203817120154_n.jpg"
                }
            ],
            "numberStudent": 2,
            "maximumStudent": 15
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

## Group Detail Information of Classes Learning Status
### Get detail duedate status [GET /api/classesdetail/detail/duedate/{classId}]    
Get detail duedate

+ Response 200

        {
               "assignments": [
                {
                    "id": 1,
                    "title": "abc",
                    "dueDate": "2020-07-22T03:08:44",
                    "submit": false
                },
                {
                    "id": 2,
                    "title": "abc",
                    "dueDate": "2020-08-20T03:08:48",
                    "submit": true
                },
                {
                    "id": 46,
                    "title": "abc",
                    "dueDate": "2020-08-20T09:45:00",
                    "submit": false
                },
                {
                    "id": 47,
                    "title": "abc",
                    "dueDate": "2020-08-06T13:30:00",
                    "submit": false
                },
                {
                    "id": 63,
                    "title": "abc",
                    "dueDate": "2020-08-04T00:22:15",
                    "submit": false
                }
            ],
            "discussions": [
                {
                    "id": 10,
                    "title": "abc",
                    "dueDate": "2020-08-07T04:44:26",
                    "submit": false
                },
                {
                    "id": 19,
                    "title": "abc",
                    "dueDate": "2020-08-07T04:44:26",
                    "submit": true
                },
                {
                    "id": 97,
                    "title": "abc",
                    "dueDate": "2020-08-27T02:55:23",
                    "submit": false
                }
            ],
            "quizs": [
                {
                    "id": 1,
                    "title": "abc",
                    "dueDate": "2020-08-07T04:44:26",
                    "submit": true
                },
                {
                    "id": 156,
                    "title": "abc",
                    "dueDate": "2020-08-27T02:55:23",
                    "submit": false
                }
            ],
            "submit": 3,
            "notSubmit": 7
        }
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

### Get detail attendance status for student [GET /api/classesdetail/detail/attendancestatus/{classId}]    
Get detail attendance status for studen
+ Response 200

        {
            "attendances": [
                {
                    "id": 1,
                    "week": 1,
                    "status": "Absent"
                },
                {
                    "id": 2,
                    "week": 5,
                    "status": "Absent"
                }
            ],
            "absent": 2
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get detail attendance status for professor [GET /api/detail/attendanceinfo/{classId}]    
Get detail attendance status for studen
+ Response 200

        {
           [
                {
                    "id": 1,
                    "week": 1,
                    "numSubmit": 2,
                    "maxNumber": 15
                },
                {
                    "id": 4,
                    "week": 1,
                    "numSubmit": 2,
                    "maxNumber": 15
                },
                {
                    "id": 2,
                    "week": 5,
                    "numSubmit": 1,
                    "maxNumber": 15
                }
            ]
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get detail score status [GET /api/detail/score/{classId}]    
Get detail score
+ Response 200

        {
            "assignments": [
                {
                    "id": 2,
                    "title": "abc",
                    "totalScore": 30,
                    "score": 5
                },
                {
                    "id": 4,
                    "title": "abc",
                    "totalScore": 100,
                    "score": 7
                }
            ],
            "discussions": [
                {
                    "id": 2,
                    "title": "abc",
                    "totalScore": 0,
                    "score": 50
                }
            ],
            "quizs": [
                {
                    "id": 2,
                    "title": "abc",
                    "totalScore": 0,
                    "score": 30
                }
            ],

            "score": 92,
            "total": 130
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

### Get detail attendance quiz [GET /api/attendancequiz/{classId}/{week}]    
Get detail attendance quiz
+ Response 200

        {
            "id": 1,
            "time": 10,
            "question": {
                "id": 1,
                "question": "What is the color of professor’s coat?"
            },
            "answers": [
                {
                    "id": 1,
                    "answer": "abc"
                },
                {
                    "id": 2,
                    "answer": "abc"
                },
                {
                    "id": 3,
                    "answer": "abc"
                },
                {
                    "id": 4,
                    "answer": "abc"
                }
            ]
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
## Group Courses
### Create Courses [POST /api/courses/create]    
Create courses

+ Request (application/json)
        
        {
            "name": "course name",
            "description": "1"
        }

+ Response 200

        {
            "id": 1,
            "name": "course name",
            "description": "1",
            "userId": 1,
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }


### Get My Courses [GET /api/courses]    
Get all my courses

+ Response 200

        [
            {
                "id": 1,
                "name": "course name",
                "description": "1",
                "userId": 1,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            },
            {
                "id": 2,
                "name": "Course name 2",
                "description": "Description 2",
                "userId": 2,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            }
        ]
        
### Delete Course [DELETE /api/courses/{id}]    
Delete my course. Only owner who created course can be delete their course

+ Response 200

        {
            "code":"DELETE_SUCCESS",
            "message":"Delete course successfuly"
        }
+ Response 400 (application/json)
        
        {
            "code":"OWER_ERROR",
            "message":"Can't delete course is not of yourseft created",
        }
        
### Edit Course [PUT /api/courses/edit]    
Edit courses

+ Request (application/json)
        
        {
            "name": "class name",
            "description": "1"
        }

+ Response 200

        {
            "id": 1,
            "name": "course name",
            "description": "1",
            "userId": 1,
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }    
        
### Comment Courses [POST /api/courses/comment]    
Comment a course

+ Request (application/json)
        
        {
            "content": "How long of this course?"
        }

+ Response 200

        {
            "id": 1,
            "content": "How long of this course?",
            "userId": 1,
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }
        
## Group Assignments
### Create Assignment [POST /api/assignments/create/{classId}]    
Create assignment

+ Request (application/json)

        {
            "week": 3,
            "title": "assignment name 1",
            "description": "abcxyz",
            "classId": 1,
            "totalScore": 100,
            "dueDate": "2020-06-25T08:41:43",
            "attachments": ["abcxyz", "abcxyz"]
        }     
        
+ Response 200

        {
            "id": 61,
            "week": 3,
            "title": "assignment name 1",
            "description": "abcxyz",
            "classId": 2,
            "totalScore": 100,
            "dueDate": "2020-06-24T19:41:43",
            "attachments": [
                "abcxyz",
                "abcxyz"
            ],
            "createdDate": "2020-08-10T08:55:22",
            "updateDate": "2020-08-10T08:55:22"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get Assignment Of Course [GET /api/assignments/{course_id}]    
Get all assignment of course

+ Response 200

        [
            {
                "id": 1,
                "name": "assignment name",
                "description": "Description of assignment",
                "courseId": 1,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            },   
            {
                "id": 2,
                "name": "assignment name",
                "description": "Description of assignment",
                "courseId": 1,
                "createdDate": "2020-07-30T12:32:27",
                "updateDate": "2020-07-30T12:32:27"
            }     
        ]

## Group Quizs
### Create Quizs [POST /api/quizes/create/{classId}]    
Create quizs

+ Request (application/json)

        {
            "week": 1,
            "title": "quizs name",
            "description": "Description",
            "totalScore": 100,
            "dueDate": "2020-06-25T08:41:40",
            "questions": [
                {
                    "type": "MULTIPLE",
                    "question": "What are you doing?", 
                    "answers": ["abcxyz", "abcxyz"],
                    "score": 100
                },
                {
                    "type": "RESPONSIVE",
                    "question": "What are you doing?",
                    "score": 200
                }
            ]
        } 

+ Response 200

        {
            "id": 102,
            "week": 1,
            "title": "quizs name",
            "description": "Description",
            "classId": 2,
            "totalScore": 100,
            "dueDate": "2020-07-30T12:32:27",
            "questions": [
                {
                    "id": 138,
                    "type": "MULTIPLE",
                    "question": "What are you doing?",
                    "answers": [
                        "abcxyz",
                        "abcxyz"
                    ],
                    "quizId": 102,
                    "score": 100,
                    "createdDate": "2020-07-30T10:16:20",
                    "updateDate": "2020-07-30T12:32:27"
                },
                {
                    "id": 139,
                    "type": "RESPONSIVE",
                    "question": "What are you doing?",
                    "answers": null,
                    "quizId": 102,
                    "score": 200,
                    "createdDate": "2020-07-30T12:32:27",
                    "updateDate": "2020-07-30T12:32:27"
                }
            ],
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
## Group Discussions
### Create Discussion [POST /api/discussions/create/{classId}]    
Create Discussion

+ Request (application/json)

        {
            "title": "discussion name",
            "description": "description",
            "week": 1,
            "totalScore": 100,
            "dueDate": "2020-06-25T08:41:40",
            "topics": [
                {
                    "topicName": "mutiple",
                    "score": 100
                },
                {
                    "topicName": "mutiple",
                    "score": 100
                }
            ]
        } 

+ Response 200

        {
            "id": 146,
            "week": 1,
            "title": "discussion name",
            "description": "description",
            "classId": 2,
            "totalScore": 100,
            "dueDate": "2020-06-25T08:41:40",
            "topics": [
                {
                    "id": 77,
                    "topicName": "mutiple",
                    "score": 100,
                    "discussionId": 146,
                    "createdDate": "2020-07-30T12:32:27",
                    "updateDate": "2020-07-30T12:32:27"
                },
                {
                    "id": 78,
                    "topicName": "mutiple",
                    "score": 100,
                    "discussionId": 146,
                    "createdDate": "2020-07-30T12:32:27",
                    "updateDate": "2020-07-30T12:32:27"
                }
            ],
            "createdDate": "2020-07-30T12:32:27",
            "updateDate": "2020-07-30T12:32:27"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
## Group Materials
### Create Materials [POST /api/classmaterials/create/{classId}] 
Create Materials

+ Request (application/json)

        {
            "week": 5,
            "title": "title",
            "description": "Description",
            "totalScore": 100,
            "dueDate": "2020-06-25T08:41:40",
            "format": "REFERENCE_MATERIAL",
            "url": "C://ESD",
            "attachedFile": ["http://file1.excel", "http:file2.png"]
        } 

+ Response 200

        {
            "id": 39,
            "title": "title",
            "description": "Description",
            "classId": 2,
            "week": 5,
            "totalScore": 100,
            "dueDate": "2020-06-25T01:41:40",
            "format": "REFERENCE_MATERIAL",
            "attachedFile": [
                "http://file1.excel",
                "http:file2.png"
            ],
            "url": "C://ESD",
            "createdDate": "2020-08-10T09:14:45",
            "updateDate": "2020-08-10T09:14:45"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
## Group Attendances
### Create Attendance [POST /api/attendances/create/{classId}]    
Create Attendance

+ Request (application/json)

        {
            "week": 5,
            "time": 20,
            "questionId" : 2,
            "answers":[
                {
                    "answer":"abc",
                    "correct": true
                },
                {
                    "answer":"abc",
                    "correct": false
                },
                {
                    "answer":"abc",
                    "correct": false
                },
                {
                    "answer":"abc",
                    "correct": false
                }
            ]
        } 

+ Response 200

        {
            "id": 4,
            "userId": 1,
            "classId": 2,
            "week": 5,
            "time": 20,
            "questionId": 2,
            "answers": [
                {
                    "id": 9,
                    "attendanceId": 4,
                    "answer": "abc",
                    "correct": true
                },
                {
                    "id": 10,
                    "attendanceId": 4,
                    "answer": "abc",
                    "correct": false
                },
                {
                    "id": 11,
                    "attendanceId": 4,
                    "answer": "abc",
                    "correct": false
                },
                {
                    "id": 12,
                    "attendanceId": 4,
                    "answer": "abc",
                    "correct": false
                }
            ],
            "createdDate": "2020-08-07T08:47:49",
            "updateDate": "2020-08-07T08:47:49"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

### Create Attendance Submit [POST /api/attendances/create/submit/{attendanceId}]    
Create Attendance Submit

status: ATTENDANCE / ABSENT / LATE

+ Request (application/json)

        {
            "answer": 3,
            "status": "ABSENT"
        }
        
+ Response 200

        {
            "id": 8,
            "attendance": {
                "id": 5,
                "userId": 1,
                "classId": 2,
                "week": 6,
                "time": 20,
                "questionId": 2,
                "answers": "13,14,15,16",
                "createdDate": "2020-08-12T01:55:31",
                "updateDate": "2020-08-12T01:55:31"
            },
            "user": {
                "id": 1,
                "name": "tieulong",
                "idNumber": 1,
                "avatar": ""
            },
            "answer": 3,
            "status": "ABSENT",
            "createdDate": "2020-08-24T04:39:03",
            "updateDate": "2020-08-24T04:39:03"
        }
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
## Group Lives
### Create Lives [POST /api/Lives/create/{classId}]    
Create Lives

+ Request (application/json)

        {
            "week": 5,
            "title": "title",
            "description": "Description",
            "url" : "https://localhost:44369"
        } 

+ Response 200

        {
           "id": 2,
            "classId": 2,
            "week": 5,
            "title": "title",
            "description": "Description",
            "url": "https://localhost:44369",
            "createdDate": "2020-08-10T09:37:57",
            "updateDate": "2020-08-10T09:37:57"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
## Group Settings
### User Settings [POST /api/UserSettings/create]    
Create User Settings

alignment: INCOMINGSCHEDULE / RECENTREGISTRAION / CLASSNAME

+ Request (application/json)

        {
            "notice": true,
            "post": false,
            "comment": false,
            "invitation": true,
            "submitting": false,
            "advisor": true,
            "language": "ENGLISH",
            "alignment": "INCOMINGSCHEDULE"
        }
        
+ Response 200

        {
            "id": 6,
            "userId": 1,
            "notice": true,
            "post": false,
            "comment": false,
            "invitation": true,
            "submitting": false,
            "advisor": true,
            "language": "ENGLISH",
            "alignment": "INCOMINGSCHEDULE",
            "createdDate": "2020-08-13T00:45:05",
            "updateDate": "2020-08-20T06:09:00"
        }
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
### Edit User Settings [PUT /api/UserSettings/edit]    
Edit User Settings

alignment: INCOMINGSCHEDULE / RECENTREGISTRAION / CLASSNAME

+ Request (application/json)

        {
            "notice": true,
            "post": true,
            "comment": false,
            "invitation": true,
            "submitting": false,
            "advisor": true,
            "language": "ENGLISH",
            "alignment": "INCOMINGSCHEDULE"
        }
        
+ Response 200

        {
            "id": 3,
            "userId": 1,
            "notice": true,
            "post": true,
            "comment": false,
            "invitation": true,
            "submitting": false,
            "advisor": true,
            "language": "ENGLISH",
            "alignment": "INCOMINGSCHEDULE",
            "createdDate": "2020-08-10T10:03:06",
            "updateDate": "2020-08-10T10:03:06"
        }
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }

### Edit Class Notice Settings [POST /api/UserSettings/classnotice]    
Class Notice Settings
+ Request (application/json)

        {
            "ClassNoticeSettings":[
                {
                    "classId": 1,
                    "notice": false
                },
                {
                    "classId": 65,
                    "notice": false
                }
            ]
        }
        
+ Response 200

        {
           [
                {
                    "id": 1,
                    "userId": 1,
                    "classId": 1,
                    "notice": false
                },
                {
                    "id": 2,
                    "userId": 1,
                    "classId": 65,
                    "notice": false
                }
            ]
        }
        
+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
## Group Color
### Edit Color Setting [PUT /api/classstudents/colorsetting/{classId}]
Edit color

+ Request (application/json)

        
        {
            "color": null
        }

+ Response 200

        {
            "id": 12,
            "classId": 7,
            "userId": 1,
            "color": "#C55A11FF",
            "createdDate": "2020-08-17T06:51:04",
            "updateDate": "2020-08-17T06:51:04"
        }
     
+ Response 400 (application/json)

        {
            "code":"DATA_ERROR",
            "message":"Data error",
        }

+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }
        

+ Response 500 (application/json)


        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"error message"
        }
        
## Group FCM
For push notification

### Update Fcm Token [POST /api/fcm/update]
Send registration id(fcm token) to backend

* Status `200` - Update token success
* Status `400` - Error
* Status `401` - Authentication is required!
* Status `500` - Internal Server Error

+ Request (application/json)
        
        {
            "fcmToken":"Azoskcmvj79kgmnelepekwcjipuy8tfjf"
        }

+ Response 200

        {
            "code":"FCM_TOKEN_UPDATED",
            "message":"Fcm Token Updated!"
        }
     
+ Response 400 (application/json)

        {
            "code":"DATA_ERROR",
            "message":"Data error",
        }

+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)
        
        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"error message"
        }  

### Push Notification [POST /fcm.googleapis.com/fcm/send]
Data structure for push notification
Have many event to push and receive notification, i define some event, we should additional during working.
Data push and receive in data json :
    "data": {
    
    }
 
![name](https://docs.microsoft.com/en-us/xamarin/android/data-cloud/google-messaging/firebase-cloud-messaging-images/01-server-fcm-app.png)

Sample:
|         Event      |     Message                                                            |                                         
|--------------------|------------------------------------------------------------------------|
|  streaming_request |    You have new request to join your todo/wish                         |  
|     live_start     |    Your todo/wish is start streaming after 10 seconds                  |                                             |
|     matched_d1     |    Your streaming have one day left before start streaming             |
|   follow_streaming |    Your streaming have new follower                                    |
|  streaming_upload  |    New todo/list is uploaded                                           |

+ Response 200 (application/json)

        {
           "evt":"live_start",
           "message":"Your todo/wish is start streaming after 5 seconds",
           "msgData":{
              "orderNo":123,
              "taskType ":"TODO/WISH",
              "title":"Travel make you richer",
              "type":"VR/NORMAL",
              "user":{
                 "userSeq":123,
                 "userName":"Long Bui",
                 "profileImage":"https://cache.desktopnexus.com/thumbseg/2351/2351437-bigthumbnail.jpg"
              }
           }
        }