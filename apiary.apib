FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# SuportU
This is document for SuportU 's REST API. All responses from and to the API will be in JSON format.

#General Request Response
Almost APIs requires a request with application/json content type (except API for upload file, image).

#Authentication
API use JWT to authenticate user. Exactly we used JWT Bearer Authentication.
Almost APIs requires authentication on header with Authorization tag and value formatted:

Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRw319.sSaOosOuPWvTYVL

#Error
We must catch common errors in all API to ensure our application works properly.

        {
            "code":"DB_ERROR",
            "message":"Cannot create new user!"
        }

|         HTTP CODE         |       Error code        |  Error message               |
|---------------------------|-------------------------|------------------------------|
|           401             |     unauthorized        |    Authen fail               |

## Group General
Get general infomations.        
### Check Update Version [POST /api/app/version]
Check update verison, if current version is less than force version update, return true.
Not need authentication

+ Request (application/json)

        {
            "os": "android",
            "current_version": "1.0.1"
        }
    
+ Response 200 (application/json)

        {
            "update": true,
            "version":"1.0.3",
        }
        
+ Response 400 (application/json)

        {
            "code":"VERSION_WRONG",
            "message":"Can't compare version to check update",
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get All Universities [GET /api/universities]
Get all universities.
Not need authentication

+ Response 200 (application/json)

        [
            {
                "id":1,
                "name":"Seoul Technolozy University",
                "created_date":"2020-06-19T10:29:29",
                "update_date":"2020-06-19T10:29:29"
            },
            {
                "id":2,
                "name":"Seoul Intenational University",
                "created_date":"2020-06-19T10:29:29",
                "update_date":"2020-06-19T10:29:29"
            },
            {
                "id":3,
                "name":"Kangnam University",
                "created_date":"2020-06-19T10:29:29",
                "update_date":"2020-06-19T10:29:29"
            }
        ]

+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }  

## Group Authentication
### SignIn [POST /api/authorization/signin]
User login

+ Request (application/json)

        {
            "email": "duclongbuivn@gmail.com",
            "password": "123456"
        }

+ Response 200 (application/json)

        {
            "user":
            {
                "id": 1,
                "name": "Bui Duc Long",
                "email":"duclongbuivn@gmail.com",
                "password": "123456",
                "phone": "56465465",
                "gender": "male",
                "hobbies": "Run",
                "createdDate": "2020-06-12T04:45:29.1393671Z",
                "updateDate": "null"
            },
            "token": "iofgnojsmopdd[spifjdwfgl;ew;d,sa,;cjkposawekdfj"
        }
        
+ Response 400 (application/json)

        {
            "code":"EMAIL_EXISTED",
            "message":"The email already exist!"
        }

        {  
            "code":"EMAIL_NOT_FOUND_ERROR",
            "message":"Email Not Found!"
        }
        
        {  
            "code":"PASSWORD_WRONG",
            "message":"Password is wrong!"
        }
        
        {  
            "code":"USER_STATUS_INVALID",
            "message":"User Status is invalid!"
        }
        
        {  
            "code":"USER_STATUS_NOT_ACTIVE",
            "message":"User Status is not active!"
        }
        
        {  
            "code":"USER_STATUS_BLOCK",
            "message":"User Status is blocked or terminated!!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Database Error or some exceptions on Server!",
        }
        
### SignUp [POST /api/authorization/signup]
User signup

+ Request (application/json)

        {
            "email": "duclongbuivn@gmail.com",
            "password": "123456",
            "name": "logn",
            "phone": "56465465",
            "gender": "male",
            "identity": "Student",
            "degree": "Bachelor",
            "school": "Yankee University",
            "idNumber": "1",
            "nationality": "Republic of Korea",
            "department": "The national language",
            "motherTongue": "Korean",
            "address": "Sejong Road",
            "detail_address": "000 Sejong Road, Junggu, Seoul",
            "schoolEmail": "university@email.net",
            "fcm_token": "c1TDG0TvRXmkeAOy1VEJ8y:APA91bGkQo5Y7ttdDXwmKsVmq1Wbpxrwc9X_ub1QJKQ2Z7Mc2bQH0dG-hlvqdXCFUJdTk6DBBXhqCd35Pr2X-8WUSnbji4fMu_Ir0dBTs4C6EKkIzw8CBaUgfqgP63b8tkJZUzfE0RF7"
        }

+ Response 200 (application/json)

        {
            "user":
            {
                "id": 1,
                "name": "Bui Duc Long",
                "email":"duclongbuivn@gmail.com",
                "password": "123456",
                "phone": "56465465",
                "gender": "male",
                "avatar": "null",
                "identity": "Student",
                "degree": "Bachelor",
                "school": "Yankee University",
                "schoolEmail": "university@email.net",
                "idNumber": "1",
                "nationality": "Republic of Korea",
                "address": "Sejong Road",
                "detail_address": "000 Sejong Road, Junggu, Seoul",
                "schoolEmail": "university@email.net",
                "department": "The national language",
                "motherTongue": "Korean",
                "consultation": "null"
                "createdDate": "2020-06-12T04:45:29.1393671Z",
                "updateDate": "null",
            },
            "token": "iofgnojsmopdd[spifjdwfgl;ew;d,sa,;cjkposawekdfj"
        }
        
+ Response 401 (application/json)

        {
            "code":"EMAIL_EXISTED",
            "message":"The email already exist!",
        }
        
        {
            "code":"EMAIL_INVALID",
            "message":"The email is invalid!",
        }
        
        {
            "code":"PHONENUMBER_EXISTED",
            "message":"Phone numeber already exist!",
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### Forgot Email [POST /api/authorization/forgotemail]
Forgot email.

+ Request (application/json)

        {
            "name": "duclong",
            "phone": "083243315",
        }
    
+ Response 200 (application/json)

        {
            "email":"duclongbuivn@gmail.com"
        }
        
+ Response 400 (application/json)

        
        {
          "code": "PHONENUMBER_NOT_FOUND_ERROR",
          "message": "Phone numeber Not Found!"
        }
        
        {
          "code": "USER_NAME_NOT_FOUND_ERROR",
          "message": "User name Not Found!"
        }
        
+ Response 500 (application/json)

        {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "error message"
        }

        
### Forgot Password [POST /api/authorization/forgotpassword]
Forgot password.

+ Request (application/json)

        {
            "name": "duclong",
            "email": "duclongbuivn@gmail.com",
        }
    
+ Response 200 (application/json)

        {
            "code":"PASSWORD_WILL_SENT",
            "message":"Password will be sent to the email registration!"
        }
        
+ Response 400 (application/json)

        
        {
          "code": "PHONENUMBER_NOT_FOUND_ERROR",
          "message": "Phone numeber Not Found!"
        }
        
        {
          "code": "USER_NAME_NOT_FOUND_ERROR",
          "message": "User name Not Found!"
        }
        
+ Response 500 (application/json)

        {
          "code": "INTERNAL_SERVER_ERROR",
          "message": "error message"
        }      
        
## Group Users

### Get My User Info [GET /api/user]
Get my user infomation.

+ Response 200 (application/json)

        {
            "id": 1,
            "email": "duclongbuivn@gmail.com",
            "password": "123456",
            "name": "logn",
            "phone": "56465465",
            "gender": "male",
            "hobbies": "Run",
            "create_date": "2020-06-10 09:57:38",
            "update_date": "2020-06-10 09:57:38"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Update User Infomation [PUT /api/users]
Update Users infomation.

+ Request (application/json)

        {
            "id": "1",
            "email": "duclongbuivn@gmail.com",
            "password": "123456",
            "name": "logn",
            "avatar": "abcxyz",
            "phone": "56465465",
            "gender": "male",
            "identity": "Student",
            "degree": "Bachelor",
            "school": "Yankee University",
            "idNumber": "1",
            "nationality": "Republic of Korea",
            "department": "The national language",
            "motherTongue": "Korean",
            "address": "Sejong Road",
            "detail_address": "000 Sejong Road, Junggu, Seoul",
            "schoolEmail": "university@email.net",
            "fcm_token": "c1TDG0TvRXmkeAOy1VEJ8y:APA91bGkQo5Y7ttdDXwmKsVmq1Wbpxrwc9X_ub1QJKQ2Z7Mc2bQH0dG-hlvqdXCFUJdTk6DBBXhqCd35Pr2X-8WUSnbji4fMu_Ir0dBTs4C6EKkIzw8CBaUgfqgP63b8tkJZUzfE0RF7"
        }
    
+ Response 200 (application/json)

        {
          "code": "UPDATE_SUCCESS",
          "message": "Request confirmed!"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
### Change Password [POST /api/authorization/changePassword]
Change password of Users.

+ Request (application/json)

        {
            "newpassword": "123456",
            "oldpassword": "654321"
        }
    
+ Response 200 (application/json)

        {
            "code":"PASSWORD_UPDATED",
            "message":"Password updated!",
        }
        
+ Response 400 (application/json)

        {
            "code":"PASSWORD_WRONG",
            "message":"Current password is invalid!",
        }
        
        {
            "code":"PASSWORD_NOT_MATCH",
            "message":"Current password is invalid!",
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
+ Response 500 (application/json)

        {
            "code":"DB_ERROR",
            "message":"Cannot execute query!",
        }
        
### UploadFile [POST /api/file/upload]
Upload File.

+ Request (application/json)

        {
            "Content-Disposition": "form-data; name="images[files]"; filename="image1.jpg",filename="image2.jpg",filename="image3.jpg""
        }
    
+ Response 200 (application/json)

        {
            [
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg",
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg",
              "https://backend-resource.s3.ap-northeast-2.amazonaws.com/URK7865529/1000_F_135455671_IDuus0CbgMpizEhhN09JdxEWQDHVMf1V-2019-11-05-33-32.jpg"
            ]
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
        {
          "code": "AUTH_ERROR",
          "message": "Access token is invalid!"
        }
        
## Group Search

### Search Users [GET /api/search/users{?keyword,page}]
Search user infomation by name

+ Parameters
    + keyword -  A query variable
    + page -  A query variable
    
+ Response 200 (application/json)

        [
            {
                "id":1,
                "name":"duclong",
                "avatar":"http://supportu.long.png"
            },
            {
                "id":2,
                "name":"long bui",
                "avatar":"http://supportu.longbui.png"
            }
        ]
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
                
## Group Classes
### Create Classes [POST /api/classes/create]    
Create class

+ Request (application/json)

        {
            "name": "class name",
            "professor_name": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classification_number": "123",
            "course_classification": "123",
            "creadits": 1000,
            "maximum_student": 20,
            "classroom": "Room",
            "lecture_time": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "invite_students": "UserName2",
            "availability": "yes",
            "chatting_room": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learning_method": "online",
            "grading_method": "online",
            "excercise_by_week": "1",
            "number_week": 2,
            "syllabus": "abcxyz"
        }

+ Response 200

        {
            "id": 1,
            "userId": 1,
            "name": "class name",
            "professor_name": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classification_number": "123",
            "course_classification": "123",
            "creadits": 1000,
            "maximum_student": 20,
            "classroom": "Room",
            "lecture_time": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "invite_students": "UserName2",
            "availability": "yes",
            "chatting_room": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learning_method": "online",
            "grading_method": "online",
            "excercise_by_week": "1",
            "number_week": 2,
            "syllabus": "abcxyz",
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }
        
+ Response 401 (application/json)

        {
          "code": "AUTH_REQUIRED",
          "message": "Invalid access token! Authentication is required!"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Database Error or some exceptions on Server!",
        }
        
### Edit Classes [PUT /api/classes/edit]    
Edit class

+ Request (application/json)

        {
            "name": "class name",
            "professor_name": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classification_number": "123",
            "course_classification": "123",
            "creadits": 1000,
            "maximum_student": 20,
            "classroom": "Room",
            "lecture_time": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "invite_students": "UserName2",
            "availability": "yes",
            "chatting_room": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learning_method": "online",
            "grading_method": "online",
            "excercise_by_week": "1",
            "number_week": 2,
            "syllabus": "abcxyz"
        }

+ Response 200

        {
            "id": 1,
            "name": "class name",
            "professor_name": "Hong Kim Dong Prof",
            "code": "123A",
            "semester": "0000year",
            "classification_number": "123",
            "course_classification": "123",
            "creadits": 1000,
            "maximum_student": 20,
            "classroom": "Room",
            "lecture_time": "2020-06-25T08:41:40",
            "advisor": "UserName1",
            "invite_students": "UserName2",
            "availability": "yes",
            "chatting_room": "yes",
            "introduction": "intro...",
            "objectives": "object...",
            "learning_method": "online",
            "grading_method": "online",
            "excercise_by_week": "1",
            "number_week": 2,
            "syllabus": "abcxyz"
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get My Classes [GET /api/classes]    
Get all my classes

+ Response 200

        [
            {
                "id": 1,
                "name": "course name",
                "description": "1",
                "userId": 1,
                "createdDate": "2020-06-25T08:41:40",
                "updateDate": "2020-06-25T08:41:43"
            },
            {
                "id": 2,
                "name": "Course name 2",
                "description": "Description 2",
                "userId": 2,
                "createdDate": "2020-06-23T16:47:34",
                "updateDate": "2020-06-23T16:47:36"
            }
        ]
        
### Delete Class [DELETE /api/classes/{id}]    
Delete my classes. Only owner who created class can be delete their class

+ Response 200

        {
            "code":"DELETE_SUCCESS",
            "message":"Delete class successfuly"
        }
+ Response 400 (application/json)
        
        {
            "code":"OWER_ERROR",
            "message":"Can't delete class is not of yourseft created",
        }
        
## Group Courses
### Create Courses [POST /api/courses/create]    
Create courses

+ Request (application/json)
        
        {
            "name": "course name",
            "description": "1"
        }

+ Response 200

        {
            "id": 1,
            "name": "course name",
            "description": "1",
            "userId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }


### Get My Courses [GET /api/courses]    
Get all my courses

+ Response 200

        [
            {
                "id": 1,
                "name": "course name",
                "description": "1",
                "userId": 1,
                "createdDate": "2020-06-25T08:41:40",
                "updateDate": "2020-06-25T08:41:43"
            },
            {
                "id": 2,
                "name": "Course name 2",
                "description": "Description 2",
                "userId": 2,
                "createdDate": "2020-06-23T16:47:34",
                "updateDate": "2020-06-23T16:47:36"
            }
        ]
        
### Delete Course [DELETE /api/courses/{id}]    
Delete my course. Only owner who created course can be delete their course

+ Response 200

        {
            "code":"DELETE_SUCCESS",
            "message":"Delete course successfuly"
        }
+ Response 400 (application/json)
        
        {
            "code":"OWER_ERROR",
            "message":"Can't delete course is not of yourseft created",
        }
        
### Edit Course [PUT /api/courses/edit]    
Edit courses

+ Request (application/json)
        
        {
            "name": "class name",
            "description": "1"
        }

+ Response 200

        {
            "id": 1,
            "name": "course name",
            "description": "1",
            "userId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }    
        
### Comment Courses [POST /api/courses/comment]    
Comment a course

+ Request (application/json)
        
        {
            "content": "How long of this course?"
        }

+ Response 200

        {
            "id": 1,
            "content": "How long of this course?",
            "userId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }
        
## Group Assignments
### Create Assignment [POST /api/assignments/create]    
Create assignment

+ Request (application/json)

        {
            "week": 3,
            "title": "assignment name",
            "description": "1",
            "class_id": 1,
            "total_score": 100,
            "due_date": "2020-06-25T08:41:43",
            "attachments": [abcxyz, abcxyz],
        }     

+ Response 200

        {
            "id": 1,
            "week": 3,
            "title": "assignment name",
            "description": "1",
            "class_id": 1,
            "total_score": 100,
            "due_date": "2020-06-25T08:41:43",
            "attachments": [abcxyz, abcxyz],
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }
        
+ Response 400 (application/json)

        {
            "code": "DB_REQUIRED",
            "message":"Data error"
        }
        
+ Response 500 (application/json)

        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"Cannot execute query!",
        }
        
### Get Assignment Of Course [GET /api/assignments/{course_id}]    
Get all assignment of course

+ Response 200

        [
            {
                "id": 1,
                "name": "assignment name",
                "description": "Description of assignment",
                "courseId": 1,
                "createdDate": "2020-06-25T08:41:40",
                "updateDate": "2020-06-25T08:41:43"
            },   
            {
                "id": 2,
                "name": "assignment name",
                "description": "Description of assignment",
                "courseId": 1,
                "createdDate": "2020-06-25T08:41:40",
                "updateDate": "2020-06-25T08:41:43"
            }     
        ]

## Group Quizs
### Create Quizs [POST /api/quizs/create]    
Create quizs

+ Request (application/json)
        
        {
            "course_id": 1,
            "name": "quizs name",
            "description": "Description"
        }

+ Response 200

        {
            "id": 1,
            "name": "quizs name",
            "description": "Description of quizs",
            "courseId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }    

## Group Discussions
### Create Discussion [POST /api/discussions/create]    
Create Discussion

+ Request (application/json)
        
        {
            "course_id": 1,
            "name": "discussion name",
            "description": "Description"
        }

+ Response 200

        {
            "id": 1,
            "name": "discussion name",
            "description": "Description of discussion",
            "courseId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        }    

## Group Materials
### Create Materials [POST /api/materials/create]    
Create Materials

+ Request (application/json)
        
        {
            "course_id": 1,
            "name": "materials name",
            "description": "Description"
        }

+ Response 200

        {
            "id": 1,
            "name": "materials name",
            "description": "Description of materials",
            "courseId": 1,
            "createdDate": "2020-06-25T08:41:40",
            "updateDate": "2020-06-25T08:41:43"
        } 
        
## Group FCM
For push notification

### Update Fcm Token [POST /api/fcm/token]
Send registration id(fcm token) to backend

* Status `200` - Update token success
* Status `400` - Error
* Status `401` - Authentication is required!
* Status `500` - Internal Server Error

+ Request (application/json)
        
        {
            "fcmToken":"Azoskcmvj79kgmnelepekwcjipuy8tfjf"
        }

+ Response 200

        {
            "code":"FCM_TOKEN_UPDATED",
            "message":"Fcm Token Updated!"
        }
     
+ Response 400 (application/json)
        
        {
            "code":"DATA_ERROR",
            "message":"Data error",
        }

+ Response 401 (application/json)

        {
            "code":"AUTH_REQUIRED",
            "message":"Invalid access token! Authentication is required!"
        }

+ Response 500 (application/json)
        
        {
            "code":"INTERNAL_SERVER_ERROR",
            "message":"error message"
        }  

### Push Notification [POST /fcm.googleapis.com/fcm/send]
Data structure for push notification
Have many event to push and receive notification, i define some event, we should additional during working.
Data push and receive in data json :
    "data": {
    
    }
 
![name](https://docs.microsoft.com/en-us/xamarin/android/data-cloud/google-messaging/firebase-cloud-messaging-images/01-server-fcm-app.png)

Sample:
|         Event      |     Message                                                            |                                         
|--------------------|------------------------------------------------------------------------|
|  streaming_request |    You have new request to join your todo/wish                         |  
|     live_start     |    Your todo/wish is start streaming after 10 seconds                  |                                             |
|     matched_d1     |    Your streaming have one day left before start streaming             |
|   follow_streaming |    Your streaming have new follower                                    |
|  streaming_upload  |    New todo/list is uploaded                                           |

+ Response 200 (application/json)

        {
           "evt":"live_start",
           "message":"Your todo/wish is start streaming after 5 seconds",
           "msgData":{
              "orderNo":123,
              "taskType ":"TODO/WISH",
              "title":"Travel make you richer",
              "type":"VR/NORMAL",
              "user":{
                 "userSeq":123,
                 "userName":"Long Bui",
                 "profileImage":"https://cache.desktopnexus.com/thumbseg/2351/2351437-bigthumbnail.jpg"
              }
           }
        }